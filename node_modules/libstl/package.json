{
  "name": "libstl",
  "version": "0.1.20",
  "description": "Standard JavaScript/TypeScript Library: DoublyLinkedList, Stack, Queue, Heap, MaxHeap, MinHeap, PriorityQueue",
  "keywords": [
    "TypeScript",
    "Datastructures",
    "DoublyLinkedList",
    "Stack",
    "Queue",
    "Heap",
    "MaxHeap",
    "MinHeap",
    "PriorityQueue"
  ],
  "main": "node-module.js",
  "scripts": {
    "test": "node Tests/run.js && exit 0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/vovazolotoy/TypeScript-STL.git"
  },
  "author": {
    "name": "Vova Zolotoy",
    "email": "vovazolotoy@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/vovazolotoy/TypeScript-STL/issues"
  },
  "homepage": "https://github.com/vovazolotoy/TypeScript-STL",
  "readme": "![libstl](libstl.png?raw=true \"libstl\")\n\n# Introduction\n\nThe Standard Javascript/TypeScript Library (STL) is a collection of interfaces and classes that are meant to solve common problems.\n\nSTL provides a set of standard datastructures. They are grouped here by their underlying implementation which usually defines their general field of application.\n\n### [API Documentation can be found here](http://vovazolotoy.github.io/docs/)\n\n# Table of Contents\n\n* [DoublyLinkedList](#doublylinkedlist)\n* [Stack](#stack)\n* [Queue](#queue)\n* [Heap](#heap)\n* [MaxHeap](#maxheap)\n* [MinHeap](#minheap)\n* [PriorityQueue](#priorityqueue)\n\n## Doubly Linked Lists\n\nA Doubly Linked List (DLL) is a list of nodes linked in both directions to each others. Iterator's operations, access to both ends, addition or removal of nodes have a cost of O(1) when the underlying structure is a DLL. It hence provides a decent implementation for stacks and queues.\n\n* [DoublyLinkedList](#doublylinkedlist)\n* [Stack](#stack)\n* [Queue](#queue)\n\n## Heaps\n\nHeaps are tree-like structures that follow the heap-property: each node is greater than or equal to its children, when compared using the implemented compare method which is global to the heap.\n\n* [Heap](#Heap)\n* [MaxHeap](#MaxHeap)\n* [MinHeap](#MinHeap)\n* [PriorityQueue](#PriorityQueue)\n\n## DoublyLinkedList\n```javascript\nvar DoublyLinkedList = require('libstl').DoublyLinkedList;\n\nvar list = new DoublyLinkedList();\nlist.push(1);\nlist.push(2);\nlist.push(3);\nlist.toString(); // = {1->2->3}\n```\n\n## Stack\n```javascript\nvar Stack = require('libstl').Stack;\n\nvar stack = new Stack();\nstack.push('A');\nstack.push('B');\nstack.push('C');\nstack.pop(); // = 'C'\n```\n\n## Queue\n```javascript\nvar Queue = require('libstl').Queue;\n\nvar queue = new Queue();\nqueue.enqueue('A');\nqueue.enqueue('B');\nqueue.enqueue('C');\nqueue.dequeue(); // = 'A'\n```\n\n## Heap\n```javascript\nvar Heap = require('libstl').Heap;\n\nvar heap = new Heap();\nheap.insert(1);\nheap.insert(2);\nheap.insert(3);\nheap.top(); // = 1\n```\n\n## MaxHeap\n```javascript\nvar MaxHeap = require('libstl').MaxHeap;\n\nvar heap = new MaxHeap();\nheap.insert(1);\nheap.insert(2);\nheap.insert(3);\nheap.top(); // = 3\n```\n\n## MinHeap\n```javascript\nvar MinHeap = require('libstl').MinHeap;\n\nvar heap = new MinHeap();\nheap.insert(1);\nheap.insert(2);\nheap.insert(3);\nheap.top(); // = 1\n```\n\n## PriorityQueue\n```javascript\nvar PriorityQueue = require('libstl').PriorityQueue;\n\nvar queue = new PriorityQueue();\n```\n",
  "readmeFilename": "README.md",
  "_id": "libstl@0.1.20",
  "_from": "libstl@"
}
