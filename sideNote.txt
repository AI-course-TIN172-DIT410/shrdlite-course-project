Goal: create Interpreter and Planner.
---------------------------
Website explanation:
Pipeline

The Shrdlite program consists of the following pipeline:

Input
    A user utterance is read from the webpage, all words separated by whitespace.
    Output: a list of strings
Parsing
    The utterance is parsed into zero, one or several semantic trees.
    Note: the grammar and parser is already given to you.
    Output: a list of parse results
Interpretation
    Each parse result is interpreted in the current world.
    Note: some parses might not have an interpretation, and some parses might have several interpretations.
    Output: a list of PDDL goals
Ambiguity resolution
    If the utterance is translated to several different PDDL goals, the ambiguity should be resolved in some way.

        the easiest (and worst) solution is to simply reject the utterance
        a better solution is to asks a clarification questions, in which case the program must exit by outputting the question, and then resuming when the user has answered

    Output: a single PDDL goal (or failure, or a clarification question)
Planning
    The PDDL goal is solved in the current world, resulting in a plan of basic commands that can take the current world into the goal state.
    Output: a list of basic commands
Output
    The final list of basic commands is performed by the virtual robot. 
------------------------------

How the code works:
"interactive" in Shrdlite.ts :
    -Waits for user input 
    -"parseUtteranceIntoPlan":
        - first it parses the utterance                              // Job is already done ! 
        - then it interprets the parse(s)                            // TODO
                Interepreter.interpret(parses, worldstate):
                    - interpertCommand(Parser.Command, worldstate):  // actual function to code
                      (one of the arg returned is the interpretation, for example )
        - then it creates plan(s) for the interpretation(s)          // TODO
                Planner.plan(interpretations, worldstate):
                    -  planInterpretation(Interpreter.Literal[][], worldstate):   // actual function to code
                         (one of the arg returned is the plan, for example "lldrpllp")
